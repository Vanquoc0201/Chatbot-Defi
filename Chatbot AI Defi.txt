npm install @google-cloud/vertexai // thư viện dùng để kết nối BE 
# Thông tin để kết nối đến Google AI
GCP_PROJECT_ID= ""
GCP_LOCATION=""
GEMINI_API_KEY=""
****B2 : Tạo giao diện chat FE (app/page.tsx)
"use client";

import { useState, FormEvent } from "react";

// Định nghĩa kiểu dữ liệu cho một tin nhắn
interface Message {
  text: string;
  sender: "user" | "bot";
}

export default function ChatPage() {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;

    const userMessage: Message = { text: input, sender: "user" };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    try {
      // Gọi đến API Route của chính Next.js
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: input }),
      });

      const data = await response.json();

      if (response.ok) {
        const botMessage: Message = { text: data.reply, sender: "bot" };
        setMessages((prev) => [...prev, botMessage]);
      } else {
        throw new Error(data.error || "Something went wrong");
      }
    } catch (error) {
      console.error("Failed to get bot reply:", error);
      const errorMessage: Message = {
        text: "Sorry, I'm having trouble connecting. Please try again later.",
        sender: "bot",
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div style={{ fontFamily: "sans-serif", maxWidth: "600px", margin: "auto", padding: "20px" }}>
      <div style={{ height: "70vh", border: "1px solid #ccc", overflowY: "auto", padding: "10px", marginBottom: "10px" }}>
        {messages.map((msg, index) => (
          <div key={index} style={{ textAlign: msg.sender === "user" ? "right" : "left", margin: "5px 0" }}>
            <span style={{
              background: msg.sender === "user" ? "#007bff" : "#e9e9eb",
              color: msg.sender === "user" ? "white" : "black",
              padding: "8px 12px",
              borderRadius: "18px",
              display: "inline-block",
            }}>
              {msg.text}
            </span>
          </div>
        ))}
        {isLoading && <div style={{ textAlign: "left", color: "#888" }}>Bot is typing...</div>}
      </div>
      <form onSubmit={handleSubmit} style={{ display: "flex" }}>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your message..."
          style={{ flexGrow: 1, padding: "10px", border: "1px solid #ccc" }}
          disabled={isLoading}
        />
        <button type="submit" style={{ padding: "10px", border: "none", background: "#007bff", color: "white" }} disabled={isLoading}>
          Send
        </button>
      </form>
    </div>
  );
}
B3 : Viết code cho API Route
// app/api/chat/route.ts
import { NextRequest, NextResponse } from "next/server";
import { VertexAI } from "@google-cloud/vertexai";

export async function POST(req: NextRequest) {
  try {
    const { message } = await req.json();

    if (!message) {
      return NextResponse.json({ error: "Message is required" }, { status: 400 });
    }

    // --- BẮT ĐẦU PHẦN TƯƠNG TÁC VỚI GOOGLE AI ---

    // 1. Khởi tạo Vertex AI
    const vertexAI = new VertexAI({
      project: process.env.GCP_PROJECT_ID!,
      location: process.env.GCP_LOCATION!,
    });

    const model = "gemini-1.0-pro-001"; // Hoặc model bạn muốn dùng

    // 2. Lấy model và bắt đầu chat
    const generativeModel = vertexAI.getGenerativeModel({ model });
    const chat = generativeModel.startChat({});

    // 3. Gửi tin nhắn đến Gemini
    const stream = await chat.sendMessageStream(message);
    
    // Trong ví dụ này, ta chỉ lấy kết quả đầy đủ đầu tiên cho đơn giản
    // Với ứng dụng thực tế, bạn có thể stream từng chữ về client
    const aggregatedResponse = await stream.response;
    const botReply = aggregatedResponse.candidates[0].content.parts[0].text;

    // --- KẾT THÚC PHẦN TƯƠNG TÁC VỚI GOOGLE AI ---

    if (!botReply) {
      return NextResponse.json({ error: "AI did not return a response" }, { status: 500 });
    }

    // 4. Trả lời về cho Frontend
    return NextResponse.json({ reply: botReply });

  } catch (error) {
    console.error("Error in chat API:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}